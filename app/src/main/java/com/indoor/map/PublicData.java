package com.indoor.map;

public class PublicData {
	
  public static int MapWidth=170;
  public static int MapHeight=100;
  public static int thresholdpara=5;
  public static int relativelength=40;  //TODO 减半时注意这边也应减半
  public static int N=0; 
  public static int initialpartlength=8;
  public static int resamplingfreq =3;
  public static int [] rout;
  
  public static void getrout(int floorID)
  {
	  switch(floorID)
	  {
	  case 1:
		  rout=new int[]{
				  15,94,580,94,
				  66,94,66,164,
				  204,30,204,94,
				  204,69,287,69,
				  276,12,276,69,
				  287,69,287,94,
				  522,33,522,94,
				  530,94,530,186,
				  560,94,560,186,
				  580,126,580,186,
				  640,126,640,186,
				  660,126,660,186,
				  530,126,770,126,
				  530,144,632,144,
				  530,155,632,155,
				  530,166,632,166,
				  530,186,770,186,
				  632,144,722,144,
				  632,155,722,155,
				  632,166,770,166,
				  685,126,685,224,
				  705,126,705,224,
				  722,126,722,224,
				  750,126,750,224,
				  770,126,770,224,
				  685,224,770,224,
				  727,224,727,694,
				  641,627,727,627
		  };
		  break;
	  case 2:
          rout=new int[]{
        		  //path17
        		  580,155,632,155,
        		  //path25
        		  727,114,727,704,
        		  //path29
        		  695,324,727,324,
        		  //path30
        		  695,269,695,324,
        		  //path21
        		  632,155,685,155,
        		  //path33
        		  685,155,685,166,
        		  //path34
        		  685,166,695,166,
        		  //path35
        		  695,166,695,177,
        		  //path36
        		  695,177,710,177,
        		  //path37
        		  710,177,710,191,
        		  //path38
        		  710,191,727,191
          };
          break;
	  case 3:
          rout=new int[]{
           		  //path12
        		  580,126,580,186,
        		  //path13
        		  640,126,640,186,
        		  //path15
        		  580,126,640,126,
        		  //path16
        		  580,144,632,144,
        		  //path17
        		  580,155,632,155,
        		  //path18
        		  580,166,632,166,
        		  //path19
        		  580,186,640,186,
        		  //path20
        		  632,144,640,144,
        		  //path21
        		  632,155,640,155,
        		  //path22
        		  632,166,640,166,
          };
          break;
	  case 4:
          rout=new int[]{
           		  //path12
        		  580,126,580,186,
        		  //path13
        		  640,126,640,186,
        		  //path15
        		  580,126,640,126,
        		  //path16
        		  580,144,632,144,
        		  //path17
        		  580,155,632,155,
        		  //path18
        		  580,166,632,166,
        		  //path19
        		  580,186,640,186,
        		  //path20
        		  632,144,640,144,
        		  //path21
        		  632,155,640,155,
        		  //path22
        		  632,166,640,166
          };
          break;
	  case 5:
          rout=new int[]{
        		  //path1
        		  15,94,615,94,
        		  //path6
        		  204,69,287,69,
        		  //path7
        		  276,12,276,69,
        		  //path8
        		  287,69,287,94,
        		  //path10
        		  530,94,530,186,
        		  //path12
        		  580,126,580,186,
        		  //path15
        		  530,126,640,126,
        		  //path16
        		  580,144,620,144,
        		  //path17
        		  580,155,620,155,
        		  //path18
        		  580,166,620,166,
        		  //path24
        		  685,191,727,191,
        		  //path25
        		  727,114,727,704,
        		  //path29
        		  640,126,640,144,
        		  //path30
        		  640,144,650,144,
        		  //path31
        		  650,144,650,155,
        		  //path32
        		  650,155,670,155,
        		  //path33
        		  670,155,670,166,
        		  //path34
        		  670,166,685,166,
        		  //path35
        		  685,166,685,191
          };
          break;
	  case 6:
		  rout=new int[]{
				  //path1
				  15,38,130,38,
				  //path2
				  56,5,56,70,
				  //path3
                  5,28,56,28,
                  //path4
                  105,5,105,38,
                  //path5(上楼梯)
                  79,38,79,70,
				  //path6(上楼梯)
				  66,38,66,70
//                  //path7
//                  5,8,50 ,8,
//                  //path8
//                  5,58,50,58

		  };
		 break;
      case 7:
          rout=new int[]{
                  //path1
                  5,28,80,28,
                  //path2
                  5,38,66,38,
                  //path3(下楼梯)
                  66,25,66,70,
                  //path4(下楼梯)
                  79,35,79,70,
          };
          break;

	  }
//	  for(int i=0;i<rout.length;i++)
//	  {
//		  rout[i]=rout[i]/2;
//	  }

  }
  
  
  public static int GetPartNumber()
  {		
	  int PathNumber=rout.length/4;
	  for (int i=0;i<PathNumber;i++)
	  {
		  N=N+rout[4*i+3]-rout[4*i+1]+rout[4*i+2]-rout[4*i+0];
	  }
//	  N=N/2;
	  return N;
  }
  
  public static void ResetPartNumber()
  {		
	  N=0;
  }
  
  public static String[] Maclist=new String[]{
	  "58:66:ba:23:be:50",
	  "58:66:ba:23:cd:30",
	  "58:66:ba:23:db:10",
	  "58:66:ba:67:ad:30",
	  "58:66:ba:67:af:90",
	  "58:66:ba:67:b4:10",
	  "58:66:ba:68:0b:d0",
	  "58:66:ba:7a:f3:b0",
	  "58:66:ba:7b:27:90",
	  "58:66:ba:7b:28:10",
	  "58:66:ba:7b:28:30",
	  "58:66:ba:7b:28:90",
	  "58:66:ba:7b:28:f0",
	  "58:66:ba:7b:29:50",
	  "80:f6:2e:12:40:d0",
	  "80:f6:2e:14:fd:70",
	  "80:f6:2e:15:01:b0",
	  "80:f6:2e:15:04:d0",
	  "80:f6:2e:15:04:f0",
	  "80:f6:2e:15:05:50",
	  "80:f6:2e:15:05:70",
	  "80:f6:2e:15:05:d0",
	  "80:f6:2e:15:05:f0",
	  "80:f6:2e:15:06:10",
	  "80:f6:2e:15:22:f0",
	  "80:f6:2e:15:23:90",
	  "80:f6:2e:15:a7:50",
	  "80:f6:2e:1a:60:b0",
	  "80:f6:2e:1a:80:90",
	  "80:f6:2e:1a:81:90",
	  "80:f6:2e:1a:82:70",
	  "80:f6:2e:1a:86:b0",
	  "80:f6:2e:1a:87:30",
	  "80:f6:2e:1a:ec:70",
	  "80:f6:2e:1a:ed:10",
	  "80:f6:2e:1a:ed:30",
	  "80:f6:2e:1a:f4:d0",
	  "80:f6:2e:1a:f5:b0",
	  "80:f6:2e:1a:f6:10",
	  "80:f6:2e:1a:f6:f0",
	  "80:f6:2e:1d:6e:10",
	  "80:f6:2e:1d:6e:50",
	  "80:f6:2e:1d:ac:30",
	  "80:f6:2e:1d:b6:30",
	  "80:f6:2e:1d:cf:f0",
	  "80:f6:2e:1d:e3:90",
	  "80:f6:2e:1e:50:30",
	  "80:f6:2e:1e:51:50",
	  "80:f6:2e:1e:51:b0",
	  "80:f6:2e:1e:70:f0",
	  "80:f6:2e:1e:78:10",
	  "80:f6:2e:1e:78:70",
	  "80:f6:2e:1e:79:70",
	  "80:f6:2e:1e:81:f0",
	  "80:f6:2e:1e:89:b0",
	  "80:f6:2e:1e:94:b0",
	  "80:f6:2e:1e:95:f0",
	  "c4:ca:d9:ea:ba:d0",
	  "c4:ca:d9:ea:bb:f0",
	  "c4:ca:d9:ec:38:d0",
	  "c4:ca:d9:ec:3b:90",
	  "c4:ca:d9:ec:f0:50",
	  "c4:ca:d9:ec:f7:10",
	  "c4:ca:d9:ed:52:b0",
	  "c4:ca:d9:ed:5c:50",
	  "c4:ca:d9:ed:8d:d0",
	  "c4:ca:d9:ed:9d:30",
	  "c4:ca:d9:ed:ac:30",
	  "c4:ca:d9:ed:b1:90",
	  "c4:ca:d9:ed:b9:d0",
	  "c4:ca:d9:ee:e7:b0",
	  "c4:ca:d9:ee:ec:70",
	  "c4:ca:d9:ef:21:90" 
  };
}
